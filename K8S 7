==> Headless Service: 
          If we consider the clusterIP or Nodeport IP , they will use load balancer concept in assigning the application requests to service. but in Headless service we dont 
have that laod balancer concept. here will reach those pods directly. 

Database concepts: 
       suppose if we have 3 replicas
mongo-0    primary
rs.init()
mongo-1    secondary
mongo-2    secondary

in data base we can see the concepts of primary and secondary. hete the 

All Write operations will happen in Primary
All Read operations will from secondary

if primary pod will goes down then primary only will pass that data to secondary and set that one as a write operator. if we achieve this we have to one of the server/pod 
and initiate the "mongo init()" and that pod will become primary. 


@@ suppose we have ceated a PVC in one namespace and PV in another. but that pv will bound with that PVC. bcoz PV is not a namespace specific. PV is a cluster specific. 


Set up Stateful set and headless service:
------------------------------------------

plz refer https://github.com/MithunTechnologiesDevOps/Kubernates-Manifests/blob/master/monodbstatefullset.yml to get manifest file. 


apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
    - port: 27017
      targetPort: 27017
  clusterIP: None        #here we use service type with None. we usualy use type and then mention the name of the service.
  selector:
    role: mongo
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      role: mongo
  serviceName: "mongo"
  replicas: 3
  template:
    metadata:
      labels:
        role: mongo
    spec:
      terminationGracePeriodSeconds: 10     #it will be helped while deleting the pods. they delete withing this time. 
      containers:
      - name: mongo
        image: mongo
        ports:
          - containerPort: 27017
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: devdb
          - name: MONGO_INITDB_ROOT_PASSWORD
            value: devdb@123
        volumeMounts:
          - name: mongo-persistent-storage
            mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: mongo-persistent-storage
      spec:
        #storageClassName: "gp2"
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi



Above in service manifest we can see

clusterIP: None      --> Here we use service type with None. we usualy use type(clusterIP/NodeportIP) and then mention the name of the service. it means its headless service. 
                         Here we cant get virtual IP address. 

In stateFulSet also we use PV and PVC concept. volumeMounts and VolumeClauimTemplate. bcoz in stateFulSet we will have diff volume for each replicas/pods. 

Here also we need storage class concept bcoz we have claim but we dont have volume to bound with. 

terminationGracePeriodSeconds: 10     #it will be helped while deleting the pods. they delete withing this time. why bcoz it might have active connections. so it needs some time
                                        to release those actions. 


volumeClaimTemplates: using this info the claim will create automatically. but in Deployment we have to create one seperate api server (api version, kind, metadata, spec). 

we are going to add our application with this database. so add beow lines with above data base lines and make iyt single manifest file. 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springappdeployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      name: springapppod
      labels:
        app: springapp
    spec:
      containers:
      - name: springappcontainer
        image: dockerhandson/spring-boot-mongo
        ports:
        - containerPort: 8080
        env:
        - name: MONGO_DB_USERNAME
          value: devdb
        - name: MONGO_DB_PASSWORD
          value: devdb@123
        - name: MONGO_DB_HOSTNAME
          value: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: springapp
spec:
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
  type: NodePort


while apply to this yml file. open one more mobaxterm and with same master node ssh link and type"watch kubectl get pods". now enter apply commond. in other mobaxterm it will 
show how pods will create.

Here the pods will craete one after the other (kubectl get pods). like mongo-0 and later mongo-1 and after some times it will create mongo-2. These are individual data bases now.

if We have already applied the storage class no need to attache new volume here. so it will assig the PV to those pvc directly.

kubectl get pv
kubectl get pvc

here for both we can see same names.

mongo-persistent-storage-mongo-0
mongo-persistent-storage-mongo-1
mongo-persistent-storage-mongo-2

Now execute 'kubectl get pods'. here we can observe that mongo-0, mongo-1 and mongo-2. it menas easily we can find out which pod is associated which pv and pvc. 
Each pod will have its own storage. bcoz of this only we will achieve the high availability. 

@@ Can I delete PVC in Kubernetes?
If a user deletes a PVC in active use by a Pod, the PVC is not removed immediately. PVC removal is postponed until the PVC is no longer actively used by any Pods. Also, 
if an admin deletes a PV that is bound to a PVC, the PV is not removed immediately. PV removal is postponed until the PV is no longer bound to a PVC.

@ I want to deploy my database as a pod, which resource we use?
--> statefulSet
@ I dont want load balancer in my k8s service, i want interact my pods directly interact without load balancing, then how do you do?
--> Headless Service,  below you can see the mongo with no virtual IP address. 

ubuntu@ip-172-31-34-33:~$ kubectl get svc
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP        4h28m
mongo        ClusterIP   None            <none>        27017/TCP      67m
springapp    NodePort    10.99.165.168   <none>        80:30568/TCP   67m

@ If we update/delete the statefulSet image/pod, which pod will update first/which order it will update?
--> in reverse order it will update. mongo-2, mongo-1 and mongo-0. 
    But while its creating it will create in 0,1 and 2 order. 
     We can scale upthe statefulSet. 


==> ConfigMap: its a K8s object, we can use this in deployment, Rs, RC or statefulSet also. 
-----------------
       An apps config is everything that is likely to vary btw deploy (staging, production, developer environment, etc). This includes database connections details and credentials
or cloud credentials . 

K8s allows you to provide configuration informations to our appliactions through configmap or secret resources. the main diff btw the two is the way a pod  stores the receiving 
information and how the data stored inthe etcd data store. 

Both ConfigMap and secret store data as a key value pair. the major diff is, Secrets store data in base64  format menawhile Configmaps store data in palin text. 

"If we have some critical data like, keys, password, service account credentials, db connectig string, etc then you should always go for secrets rather than ConfigMap".

Here we dont do any hardcode in username and password. so we use Configmap.

          apiVersion: v1
          kind: Service
          metadata:
            name: mongo
          spec:
            ports:
              - port: 27017
                targetPort: 27017
            clusterIP: None        #here we use service type with None. we usualy use type and then mention the name of the service.
            selector:
              role: mongo
          ---
          apiVersion: apps/v1
          kind: StatefulSet
          metadata:
            name: mongo
          spec:
            selector:
              matchLabels:
                role: mongo
            serviceName: "mongo"
            replicas: 3
            template:
              metadata:
                labels:
                  role: mongo
              spec:
                terminationGracePeriodSeconds: 10     #it will be helped while deleting the pods. they delete withing this time. 
                containers:
                - name: mongo
                  image: mongo
                  ports:
                    - containerPort: 27017
                  env:
                    - name: MONGO_INITDB_ROOT_USERNAME
                      valueFrom:
                        configMapKeyRef: 
                          name: springappconfig     #we have to craete a configmap in this name. then only it will consider.
                          key: mongodbusername
                    - name: MONGO_INITDB_ROOT_PASSWORD
                      valueFrom:
                        configMapKeyRef: 
                          name: springappconfig     #we have to craete a configmap in this name. then only it will consider.
                          key: mongodbpassword
                  volumeMounts:
                    - name: mongo-persistent-storage
                      mountPath: /data/db
            volumeClaimTemplates:
              - metadata:
                  name: mongo-persistent-storage
                spec:
                  #storageClassName: "gp2"
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 1Gi
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: springappdeployment
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: springapp
            template:
              metadata:
                name: springapppod
                labels:
                  app: springapp
              spec:
                containers:
                - name: springappcontainer
                  image: dockerhandson/spring-boot-mongo
                  ports:
                  - containerPort: 8080
                  env:
                  - name: MONGO_DB_USERNAME
                    valueFrom:
                        configMapKeyRef: 
                          name: springappconfig     #we have to craete a configmap in this name. then only it will consider.
                          key: mongodbusername
                  - name: MONGO_DB_PASSWORD
                    valueFrom:
                        configMapKeyRef: 
                          name: springappconfig     #we have to craete a configmap in this name. then only it will consider.
                          key: mongodbpassword
                  - name: MONGO_DB_HOSTNAME
                    value: mongo
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: springapp
          spec:
            selector:
              app: springapp
            ports:
            - port: 80
              targetPort: 8080
            type: NodePort



Before executing this configmap manifest file. we have to check whether we have any configmap/secrets there. below we can see one configmao and secret. these are default ones. 


ubuntu@ip-172-31-34-33:~$ kubectl get configmap
NAME               DATA   AGE
kube-root-ca.crt   1      14d
ubuntu@ip-172-31-34-33:~$ kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-nspzr   kubernetes.io/service-account-token   3      14d


 @@ i am deploying the pod but its not creating. how to check?
--> using 'kubectl describe pod <podname>'



Above we have manifest file with configmap. but we dont have configmap file. if we dont have manifest file it will show below error after apply kubectl
"createConatinerCofigError" in pods creation. (kubectl get pods)

ubuntu@ip-172-31-34-33:~$ kubectl get pods
NAME                                  READY   STATUS                       RESTARTS   AGE
jenkins-deployment-6f7959b94f-8l7q9   1/1     Terminating                  0          13d
mongo-0                               0/1     Pending                      0          5s
mongorc-z5j8h                         1/1     Terminating                  0          13d
springappdeployment-d99cc466f-97glc   0/1     CreateContainerConfigError   0          5s
springappdeployment-d99cc466f-kmx5q   0/1     CreateContainerConfigError   0          5s

==> OR if we descrie that pod also we can get to know that what is the error (configmap "springappconfig" not found) it is facing to create a POD. 

kubectl describe pod <podName>
.
.
  Warning  Failed     11s (x4 over 44s)  kubelet            Error: configmap "springappconfig" not found

--> So lets create a "springappconfig" manifest file. 

apiVersion: v1
kind: Configmap
metadata: 
name: springappconfig
data:                           #in config map we dont use spec. insted we use data. 
  mongodbusername: devdb
  mongdbpassword: devdb@123


ubuntu@ip-172-31-34-33:~$ kubectl get configmap
NAME               DATA   AGE
kube-root-ca.crt   1      14d
springappconfig    2      45s


ubuntu@ip-172-31-34-33:~$ kubectl get pods
NAME                                  READY   STATUS                       RESTARTS   AGE
jenkins-deployment-6f7959b94f-8l7q9   1/1     Terminating                  0          14d
mongo-0                               0/1     Pending                      0          179m
mongorc-z5j8h                         1/1     Terminating                  0          14d
springappdeployment-d99cc466f-97glc   0/1     CreateContainerConfigError   0          179m
springappdeployment-d99cc466f-kmx5q   0/1     CreateContainerConfigError   0          179m



still we are getting the same . so delete that old one and re apply once. 

ubuntu@ip-172-31-34-33:~$ kubectl delete -f mongostatefulsetcm.yml
service "mongo" deleted
statefulset.apps "mongo" deleted
deployment.apps "springappdeployment" deleted
service "springapp" deleted

buntu@ip-172-31-34-33:~$ kubectl apply -f mongostatefulsetcm.yml
service/mongo created
statefulset.apps/mongo created
deployment.apps/springappdeployment created
service/springapp created













