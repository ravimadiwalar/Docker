Now we have created java-web-app chart and want to add that to repository in guthub, we can add that too in nexus and jfrog also. 

first we need to validate that chart is validate or not. to check that we use 
ubuntu@ip-172-31-11-34:~$ helm lint java-web-app/
==> Linting java-web-app/
[INFO] Chart.yaml: icon is recommended

1 chart(s) linted, 0 chart(s) failed

it means the tempates are proper. nothing has failed. 
Now we have to craete a package. -> helm package java-web-app
It will create a tar file. (java-web-app-0.1.0.tgz)

ubuntu@ip-172-31-11-34:~$ helm package java-web-app
Successfully packaged chart and saved it to: /home/ubuntu/java-web-app-0.1.0.tgz

ubuntu@ip-172-31-11-34:~$ ls
aws  awscliv2.zip  get_helm.sh  java-web-app  java-web-app-0.1.0.tgz  kubectl  kubernetes-ingress

If we want to maintain this one has a source code in github, we should do some setting in repository. 
Git- create a repo- go inside that repo- setting- GitHub pages - click it out here- choose mainbarnch as a Source and save. Then we will get one URL. that is github page URL(copy that)

i have to push that tar file to github. 

To clone take the https code form newly created repo-> git clone <HTTPS URL>

ls MithuntechHelm -> Now we dont have anything

lets move that tar fiel to here -> mv ava-web-app-0.1.0.tgz MithuntechHelm

need to generate helm index file. will get index.yaml file -> helm repo index <GitHubPage URL> 

ls MithuntechHelm -> Now we can see 2 added files here. 
check what that file has. it contains chartname and its url -> cat index.yaml

cd MithuntechHelm
git add .
git comit -m 'Helm Chart Files commited"
git push

cd ..

Now add that githib page url to helm client --> helm repo add <randomRepoName> <GitHubPageURL> 
                                                helm repo add mithun <GitHubPageURL> 
helm repo ls -> here we can see that newly added repo. 
helm ls -> it will check already deployed charts. list realease. 
helm search repo -> hetre will see this newly added repo. 
helm search repo <mithun>

helm template mithun/java-web-app -> now wwe can see java-web-app chart inside our mithun. 

helm show values mithun/java-web-app -> all values of that chart. 

we can modify as we required-> firsrt do append and edit that values file. 

helm show values mithun/java-web-app >> javawebappvalues.yaml
vi javawebappvalues.yaml
helm install <anyName> mithun/java-web-app -f javawebappvalues.yaml -> our javawebappvalues.yaml file will pass edited data to new chart. 


==> MONITORING: 
    -----------
         We use this to know the status of the servers. if we get anything wrong it will alert us to fix it. 

=> Prometheus: its an open source Monitoring and Alerting Tool Kit. This will Decrease the DownTime and Optimise the resources. We acn implement server monitoring/application 
monitoring using Prometheus. 

What is Server monitoring? 
-> its a way to look into what servers are doing in real time. It can provide you with some actionable data and its often used for troubleshooting and capacity planning.
Its typlically done at 3 levels

1) Network (traffic, bandwidth,latency etc)
2) machine (CPU and memory utilization, storage)
3) Application (rate of user command, locks, large syncs, commits.submits. etc)

Why Monitor our servers? 
-> Server monitoring has lot of benefits. The biggest benefit is avoiding reactive panics(We respond alraedy something went wrong). here its proactive. bcoz will get notified before
our server get impacted. it will alert us that we have 80% load and memory utilization. so we can take actions befre it goes wrong. 
* increase the uptime
* Improve hardware and software performance
* Plan for the future by making the best use of your resources. 

Implementing Monitor can give you an almost immidiate return on investament. you can observe trends(at what time my apllication is having a load
), spikes,and anomiles that may indicate a problems. and then you can drill down to discover the root cauuse of the issue. 

=>Monitoring Tools: 
NewRelic
nagios
Datadog
AppDynamics  -> Enterprise app
Dynatrace
Prometheus

=> Prometheus: Its an open source system that collects and manages server and application metrics(data). it can also be  configure to notify your team when an issue arises. 

What is Grafana?
-> its an open source tool that allows you to easily visualize information(it will provide the prometheus data in nice dashboard format). 
Grafana Dashboard take info from server monitoring tool like prometheus to display that info in nice format.   









