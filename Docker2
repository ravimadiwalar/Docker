Docker repo- Where you can store one or more versions of a specific docker image.
Docker registry- Registry is a collection of one or more docker repo
docker hub is a public registry 
private registries (we can store our own repo and access to our company only) are Nexus/Jfrog. in aws ECR(elastic cobntainer registry). in google GCR and in Azure ACR.

docker images or docker image ls - using these commands we can how many images are there in our server.
image fallows the layared architecture. it contains multiple layers.docker is maintaining all layers.

docker working directory - /var/lib/docker
ubuntu@172.23.42.212:~maven-web-apliacation$sudo ls /var/lib/docker
builder  buidkit  containers  image  network  overlay2 plugins  voluemes....... 

above in working dir we can files like container, images.    image conatin all images and conatiner conatin all containers in server.
ubuntu@172.23.42.212:~maven-web-apliacation$sudo ls /var/lib/docker/image/overlay2
it conatisn all image info

ubuntu@172.23.42.212:~maven-web-apliacation$docker images
REPOSITORY                                 TAG    IMAGESID             CREATED      SIZE 
dockerhandson/maven-web-application         1     8frgsf2724ss                        380MB
dockerhandson/maven-web-application        none                                       380MB
tomcat                              7-jdk-corretto                                    374MB

above we have image details but we didnt create any image in the name of tomact. 
why its showing under image bcoz we used this as a base image.  on top if this we cretaed our own image.if we run the container we wont this tomcat there. 

now we have to push that iamge to container but we have to authenticate it first.  

docker login -u <username> -p <password> <URL>

for dockerhub we dont need to give URL. for private registry we have to 

[ for biulding an image in private registry 
for Nexus - docker build -t 172.67.180.120:8083/maven-web-appliaction:1 .
                            (nexus server ip adress:port)

for ECR-   docker image -t amazon.ecr.1265.com/maven-web-application:1 .
                           ( ECR URL)
]

if we want to authenticate with private registry we have to fallow below ones
for Nexus - docker login -u admin -p admin123 172.67.180.120:808
for ECR  -  docker login -u admin -p admin123 amazon.ecr.1265.com

now we have to push that imahe to registry
ubuntu@172.23.42.212:~maven-web-apliacation$docker push dockerhandson/maven-web-application:1

it pushes all layers of that image to registry. go to docker hub and refresh your registry there we can get this in 1 (version). 

if we want to pull the image to any server and if its a public registry no need to authenticate but for private we have to authenticate where you are pulling.
ubuntu@172.23.42.212:~docker pull dockerhandson/maven-web-appliaction:1 . 

we can pull images without giving the version also. bcoz it will consider the version as "latest" by default. it as same as in build and pushing an image also.
ubuntu@172.23.42.212:~docker pull dockerhandson/nodejsapp
using defalut tag: latest

but we get an error why bocz we dont have that tag in that image

Basic Commands: docker info    docker version or docker --version

we can exicute docker image from anywhere

ubuntu@172.23.42.212:~maven-web-apliacation$cd..
ubuntu@172.23.42.212:~docker info   -->we can see images, server name, cpu, storage, etc
ubuntu@172.23.42.212:~docker version   --> here we can see client and server. we can install client only and we can connect to another server remotly.
ubuntu@172.23.42.212:~docker --version

if we want to see more details about image 
ubuntu@172.23.42.212: docker image inspect <imageID/Name>   or   ubuntu@172.23.42.212: docke inspect <imageID/Name> 

ubuntu@172.23.42.212:~maven-web-apliacation$docker images
REPOSITORY                                 TAG    IMAGESID             CREATED      SIZE 
dockerhandson/maven-web-application         1     8frgsf2724ss                        380MB
dockerhandson/maven-web-application        none                                       380MB
tomcat                              7-jdk-corretto                                    374MB

ubuntu@172.23.42.212:~docker image inspect dockerhandson/maven-web-application:1

here we will get all details about layers of that image and some environment variables. these were set by tomcat itself.

if we want to see the layers of the image :- docker history <imageID/Name>
ubuntu@172.23.42.212:~docker history 8frgsf2724ss

where these layers have been maintained?
ubuntu@172.23.42.212:~sudo ls /var/lib/docker/overlay2

 How to delete the image?
docker rmi <imageID/Name> or docker rmi -f <imageID/Name>

ubuntu@172.23.42.212:~docker rmi 8frgsf2724ss

we can delete multi images in single command: docker rmi <imageID/Name> <imageID/Name> <imageID/Name> ...
or 

ubuntu@172.23.42.212:~docker images -q
8frgsf2724ss
gd73737bsjhj

docker images -q    will display all image ID's and for deleting all images at a time we use like below

ubuntu@172.23.42.212:~docker rmi $(docker images -q)
or ubuntu@172.23.42.212:~docker rmi -f $(docker images -q)


Can we delete the image if there is running conatiner?
NO

Now go and build an image one more time

ubuntu@172.23.42.212:~docker build -t dockerhandson/maven-web-application .
 here will get an error bcoz we dont have that docker file in current directory. so we have to go in and execute 

ubuntu@172.23.42.212:~cd maven-web-application
ubuntu@172.23.42.212:~maven-web-application$docker build -t dockerhandson/maven-web-application .
.
.
.
successufully tagger dockerhandson/maven-web-appliaction:latest

since we didn't mention the version. it chiose latest one by default.

lets take scenario like we have multiple file. so we need to mention specific one

ubuntu@172.23.42.212:~maven-web-application$ls
dockerfile   ...   ...   ...   ...
ubuntu@172.23.42.212:~maven-web-application$mv dockerfile dockerfile_mavenwebapp
ubuntu@172.23.42.212:~maven-web-application$ls
dockerfile_mavenwebapp  ..  ... ...
ubuntu@172.23.42.212:~maven-web-application$docker build -t dockerhandson/maven-web-application .

Above we have chnaged the name of dockerfile to dockerfile_mavenwebapp and execute the build but i got an error bcoz by defalut it will look for only dockerfile name not any other.
for customised name we have one option to build an image

ubuntu@172.23.42.212:~maven-web-application$docker build -t dockerhandson/maven-web-application -f dockerfile_mavenwebapp 


==> How to move the image from one server to another without registry?
using tar file out if that image we can move the image.tar file contain all layers of that image.

docker save <imageid/name>  -o <filename>.tar

<filename>.tar  - here we have to give the path where we want to move that image.
~/- user home dir

ubuntu@172.23.42.212:~maven-web-application$docker save dockerhandson/maven-web-application:latest -o ~/mavenwebapp.tar
ubuntu@172.23.42.212:~maven-web-application$cd ..
ubuntu@172.23.42.212:~maven-web-application$ls
maven-web-application   mavenwebapp.tar

then we have to apply scp command and copy that tar file. then in that new server execute "docker load -i <file>.tar"   it will extract that image from the tar file.

==> How to pus images to private registry?
lets demonistarte ECR (Elastic contaioner registry) in AWS.  lets create a ECR registry. search for ECR and click on Create repository in the name of maven-web-application. and selcet Private on top side and create registry.
now we have to push that image here. so select the URL of that ECR new repo. and tag that image to registry.  

ubuntu@172.23.42.212:~maven-web-application$docker build -t 5652827fdhdh.dkr.ecr.ap-south-1.amazonaws.com/mavn-web-applaication -f dockerfile_mavenwebapp
ubuntu@172.23.42.212:~maven-web-application$docker images

we we can see that new ecr image here. 
now push the image  
ubuntu@172.23.42.212:~maven-web-application$docker push 5652827fdhdh.dkr.ecr.ap-south-1.amazonaws.com/mavn-web-applaication:1

but will get an error. bcoz we need username and passowrd of that ECR. how to get credentials of ECR? select ECR repo -->View push commands--> here we can see the user name is AWS
and dont get the password but we get instaruction to find out. copy that (aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 56772246.dkr.ecr.ap-south-1.amazon.com) 
and select only "aws ecr get-login-password --region ap-south-1". so install aws CLI first.

ubuntu@172.23.42.212:~maven-web-application$aws ecr get-login-password --region ap-south-1
Commnad aws  not found , but can be istalled with

sudo snap install  aws-cli # version 1.15.23.12
sudo apt install awscli   # 1.18.79.-unbutua,20.200.1

Above we got an wrror bocz we didnt install the CLI. so for installing CLI just copy that aboce one "sudo apt install awscli"

ubuntu@172.23.42.212:~maven-web-application$ sudo apt install awscli

now
ubuntu@172.23.42.212:~maven-web-application$aws ecr get-login-password --region ap-south-1
Unable to locate credentials. you can configure credentials by  running  "aws configure".

we got an error. bcoz since it has only AWS ECR access we have to give an AWS access to this server.so lets go with IAM role. 
but role should have permission to this ECR. 

Go to AWS and search for IAM and Role and Create Role and select EC2 --> permission--> search for EC2container registry and selcet AmazonEC2ContainerRegistryFullAccess
-->Next:tags--> Role Name:ECR_fullAcess-->Create Role

next go to our EC2 server(build server) and select-->action-->Security-->Modify IAM Role-->attache this role and save.

ubuntu@172.23.42.212:~maven-web-application$aws ecr get-login-password --region ap-south-1

Now we will get the tokon password and then we have to give authentication to this

ubuntu@172.23.42.212:~maven-web-application$aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 56772246.dkr.ecr.ap-south-1.amazon.com
.
.
Login Succeeded
ubuntu@172.23.42.212:~maven-web-application$docker push 56772246.dkr.ecr.ap-south-1.amazon.com/maven-web-application:1
now we can find out this image in ECR. but we have another Docker_Dev_Server. there we have to pull that image. lets connect to this server.
ubuntu@173.43.42.212:~docker pull 56772246.dkr.ecr.ap-south-1.amazon.com/maven-web-application:1

here we have an error. so we need to authenticate with ECR
install AWS CLI ( serach in gogle in the name of installing aws cli)  and select Linux and copy that script.

ubuntu@173.43.42.212:~curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
 now we have installed CLI- we are trying to get password to connect with ECR
ubuntu@173.43.42.212:~sudo apt install unzip
ubuntu@173.43.42.212:~unzip awscliv2.zip

then create AWS IAM role_create role-AmazonEC2ContainerRegistryReadonly -->next--> role name [EC2-Read only] and create role.

  now go to Docker_Dev_Server and -->Action-->security-->modify IAM Role-->select EC2readonly( just now craeted one) and save.
ubuntu@173.43.42.212:~aws ecr get-login-password --region ap-south-1

now will get password and then login using same thingas we used

ubuntu@172.23.42.212:~maven-web-application$aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 56772246.dkr.ecr.ap-south-1.amazon.com
ubuntu@173.43.42.212:~docker pull 56772246.dkr.ecr.ap-south-1.amazon.com/maven-web-application:1

now we can pull the image and here we can only pullthe images. bcoz we have given readonly in IAM role.

DOCKER CONTAINER
====================

to delete all images at a time

docker rmi -f $docker start <conatinerID/Name>(docker images -a)

to check all imformation about images use " docker info "

To create a conatiner we have 2 commands
1) docker create --name <conatinername> -p <hostposrt:containerport> <imagename>   --> using this we can only craete a conatiner but it will not start.
docker start <conatinerID/Name>
docker restart <conatinerID/Name>
docker stop <conatinerID/Name>

2)docker run -d --name <containername> -p <hostport:containerport> <imagename>  --> it will do both. -p= port publish

host port- whatever host port is availbel in our system
conatiner port- it depends on image what image your using
 
without giving --name <containername>  also is fine bcoz docker will give one name to that container.

Each conatiner will have own IP address but we cant access container from outside using conatiner IP. we can access by host system IP. host port will 
be anyone but conatiner port should always be what we used for container.

IMP:~ if you dont have any images in your console also we can run the container. bcoz it will pull the image directly from that conatiner where we pushed it 
and create and run the conatiner. but we have to give the exact name of that pushed image.

just delete all images using- 
ubuntu@173.43.42.212:~docker rmi -f $(docker iamges -a)
ubuntu@173.43.42.212:~ docker images
 we cant see any images here. the create/run the conatiner it will pulll and run the container.

ubuntu@173.43.42.212:~docker create --name mavenwebapplicationcontainer -p 7000:8000 56772246.dkr.ecr.ap-south-1.amazon.com/maven-web-application:1

to find out the list of all running container use "docker ps or docker conatiner ls"
for all running+stopped  " docker ps -a or docker container ls -a"
we cant have same named conatiners. they always uniq and host posrt should be uniq.

ubuntu@173.43.42.212:~docker start mavenwebapplicationcontainer
ubuntu@173.43.42.212:~docker ps
CONATINER ID      IMAGES     
STATUS              PORTS  NAMES      COMMAND      CRAETED
3735892261272      
up 5 sec            0.0.0.0:7000->8000/tcp  mavenwebapplicationconatiner

0.0.0.0:7000   -->we mapped one host port with this container and that request go to 8000 if some is using this machine IP address and 8000 port.

To check the running/listening ports: sudo netstat -tunlp

ubuntu@173.43.42.212:~sudo apt install net-tools
ubuntu@173.43.42.212:~ sudo netstat -tunlp

now go to server and give inbound access to the port 7000 and copy that server public IP and browse along with host port number

152.74.14.53:7000  --> now we can access that appliaction from outside.
