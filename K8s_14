HELM: 
------
     Helm is a package manager for k8s application. it allows you to install/deploy/remove/update applications on your k8s clusterin a similar manner to yum/apt for linux. 

HELM let you fetch, deploy and manage the lifecycle of applications, both 3rd party products (metric server, nginx ingress- which are not developed by us)and your own. 

=> HELM introduces several familiar concepts such as: 
 1) HELm Charts: Charts which are HELM packages (liek deb/rpm).
  Here we can see two components templates and values- Templates are nothing but k8s manifests. 
These tepmlate and values go through a template rendering engine, producing a manifest that is easily understand by k8s. 

 2) HELM repositories:  whcih holds charts (similar to package repos)
 3) HELM CLI: A CLI with install/upgarde/remove commands the charts/packages. 

-> Why we use HELM? 
 K8s can be difficult to manage with all the objects you need to maintain (Configmap,/Secrets, pods, services etc) HELM manages all of this for you.  

Helm greatly simplifies the process of creating , managing and deploying applications usning HELM charts. In addition to that Helm also maintain a versioned history of every chart
(application) installation. if something goes wrong , you can simply call "helm rollback". 

Similarly, if you need to upgrade a chart, you can simply call "helm upgrade". 

HELM uses charts to pack all the required K8S componets (Manifest) for an application to deploy, run and scale. 
Charts are very similar to RPM and DEB packages for Linux, making it easy for developers to distribute and consume/install applicatoons via diff repos. if we share the HELM charts
with anyone after setting up the HRELM chart and they can upgarde that application also. will maintain that HELM charts in repos to access everyone. 

HELM Packges rae called as a Charts. 

basic Directory staructure: 

javawebapp
|
| ---- Charts.yaml #Meta data info about chart
|------charts #Define dependent helm chart names. 
|------templates # will maintain K8s manifest files which is required for our application. 
|   |--deployment.yaml
|   |-- hpa.yaml
|   |-- ingress.yaml
|   |-- service.yaml
|   |-- serviecaccount.yaml.... etc
|
|------Values.yaml # will define default values which will be reffred in templates. 


=> Helm Repository: 
           Repo is where helm charts are held  and maintain. in these are a set of templates and configuration values stored as code (sometimes packed as a tar, gz file). 

We can see HELM 3 (previous version) and HELM 3.x Architecture: 

In HELM Chart Repo we will maintain our all packages - --> Developer m/c, jenkins m/c. here we have HELM CLI installed- using this HELM CLI we can deploy our application in our 
K8S cluster. 

helm repo add <helmRepoURL>    # add our package to repo. Git, Nexus, Jfrog are use as arepository. 

helm install <RepoName>/<ChartName>


HELM CLI will be used to conncet to k8s directly.the HELM CLI will use KubeConfig file to connect to the cluster. 

in HELM 2 architecture there is a helm component called "tiller" which will be deployed in the k8s kube-system namespace. Tiller component is removed in helm 3 version. 

Tiller is an helm application and helm should connect with Tiller and that tiller will help to conncet to k8s cluster using RBAc. we need to deploy that tiller application. 
tiller will run as a pod in k8s. 

Installing HELM 3: 
          The workstation that you are running should have the kubectl contect set to the cluster you want to manage with HELM. HELM works inside k8s and uses by defalut 
kubeconfig file (./kube/config). 













