 kubectl version  

cat ~/.kube/config  --> here we have our cluster info. kubectl will use that config file to intercat with API server (Cluster).

kubectl get pods -o wide -n kube-system  --> herw we can see all our cluster componenets and they have diff nodes. control plane have same IP and kube-proxy also we can 
in diff IP and same IP as well. bocz here kube-proxy works in both nodes. these are all part of pod.

kubelet is not a pod. its a process. and its a part of every node. 

ubuntu@ip-172-31-33-243:~$ sudo service kubelet status
.
.Active:active(running)


NOTE: diff btw kind and kubeadm? 
==> kind is one software using which we can set up a cluster in our windows mc. but here our nodes will be running as a container. 
==> Kube-spray is also a software. another way of installing the cluster. kube-sparay and kubeadm are ways of installing the cluster. kube-spray use ansible playbook in the background. 



--> Name Space: We can islolate K8s clusters using namespaces. Name space is like a virtual cluster within the cluster. 
                assume we have dev1, dev2, dev3 apllications. instead of creating a 3 diff clusters we can create them in sigle cluster with diff name spaces. same cluster but 
                logically isolated. they can help you and your teams with organization,security, and even performanace. the 1st 4 names spaces created in a cluster are always Default,
         kube-system and kube-public and Kube-node-lease. 

for finding the name spaces: kubectl get namespace
ubuntu@ip-172-31-33-243:~$ kubectl get namespace
NAME              STATUS   AGE
default           Active   7d21h
kube-node-lease   Active   7d21h
kube-public       Active   7d21h
kube-system       Active   7d21h

here we have 4 name spaces. within these name spaces we create some K8s resources/objects. those are

POD
ReplicationContraoler (rs)
Replicaset (rs)
Deamonset
Deployment
StatefullSet
Service
ConfigMap
Secrete
PersistentVolume
PersistentVolume Claim
Role
Role Binding
ClusterRole
ClusterRole Binding



ubuntu@ip-172-31-33-243:~$ kubectl get all
NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   7d21h

Above its pointing to Default name space by default and it will show all resource status. if we try to find pods it will show nothing bocz we havent created any pods yet in any
name space. like this we havent created any resources here. so will the same thing. 

ubuntu@ip-172-31-33-243:~$ kubectl get pods
No resources found in default namespace.

below we are checking the resources in Kube-system name space. here is the result. we can see resources but these are related to k8s system resources. 

ubuntu@ip-172-31-33-243:~$ kubectl get all -n kube-system
NAME                                           READY   STATUS    RESTARTS   AGE
pod/coredns-74ff55c5b-9jmdj                    1/1     Running   1          7d21h
pod/coredns-74ff55c5b-j9ktx                    1/1     Running   1          7d21h
pod/etcd-ip-172-31-33-243                      1/1     Running   1          7d21h
pod/kube-apiserver-ip-172-31-33-243            1/1     Running   1          7d21h
pod/kube-controller-manager-ip-172-31-33-243   1/1     Running   1          7d21h
pod/kube-proxy-zfxrk                           1/1     Running   1          7d21h
pod/kube-scheduler-ip-172-31-33-243            1/1     Running   1          7d21h
pod/weave-net-bkldg                            2/2     Running   3          7d21h

NAME               TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE
service/kube-dns   ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   7d21h

NAME                        DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE
daemonset.apps/kube-proxy   1         1         1       1            1           kubernetes.io/os=linux   7d21h
daemonset.apps/weave-net    1         1         1       1            1           <none>                   7d21h

NAME                      READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/coredns   2/2     2            2           7d21h

NAME                                DESIRED   CURRENT   READY   AGE
replicaset.apps/coredns-74ff55c5b   2         2         2       7d21h



==> POD: 
* A POD always runs on a Node (master/worker). 
*A POD is the smallest building block or basic unit of scheduling in k8s.
*In a k8s cluster , a pod represents a running process (In docker conatiner is the running process). 
*inside a pod, you can have one or more conatiners. Thoss containers all share a unique(same) network IP, Storage, Network and any other specificationapplied to the Pod. 
 * each and every pod will have IP address in cluster. these will be mainatianed by k8s CNI(containe networking interface). Weave new we installed. that will control IP's.  
* Pod is  group of one or more containers which will be running on some nodes. but we cant set two conatiners with same port #. 
* if the two conatiners in same POD they communicate with each other isung localhost<container port>. 
* any data saved inside the pod will disappear without peding.

==>Two ways to execute kubectl:
1) imperative Approach: its a command. 

2) Declarative approach: we can decalre what we need in k8s yml file. this is called k8s manifesrt file. will prefer more this approach. 
 Here also we have some root attributes are

Apiversion: each and every k8s will have its own Apiversion. 

Kind          apiversion
Pod             v1
rc              v1
Service         v1
rs             apps/v1
Deployment     apps/v1
daemonset      apps/v1
Job            batch/v1


kind: here we will mention which resource we are doing
metadata:we will mention pod name and labels
spec: specifications. 

for pod creation:
-----------------
apiversion: v1
kind: Pod
metedata: 
  name: <PODName>
  namespace: <namespaceName>
  labels: 
    <key>: <value>
spec:
  containers: 
  - name: <containername>
    image: <imagename>
    ports:
    - containerPort: <containerport#>


ubuntu@ip-172-31-33-243:~$ vi javawebapppod.yml
apiVersion: v1
kind: Pod
metadata: 
  name: javawebapppod
  labels: 
    app: javawebapp
spec: 
  containers: 
  - name: javawebappcontainers
    image: dockerregistry/java-web-app:1
    ports:
    - containerPort: 8080

:wq

now we have created on pod yml file. if i want validate that file. we do dry run. if w have done something wrong in console it will through an error. 
here i didnt mention the namespace name. the pod will craeted under default namespace. while appying also we can mention it. 

kubectl apply -f javawebapppod.yml -n <namespaceName>

*K8s supports both Json and yml format. 

ubuntu@ip-172-31-33-243:~$ kubectl apply -f javawebapppod.yml --dry-run=client
pod/javawebapppod created (dry run)

  
now go and apply this pod 

ubuntu@ip-172-31-33-243:~$ kubectl apply -f javawebapppod.yml
pod/javawebapppod created

Now check the container is created or not:

ubuntu@ip-172-31-33-243:~$ kubectl get pods
NAME            READY   STATUS    RESTARTS   AGE
javawebapppod   0/1     Pending   0          3m50s

its still pending. and 0/1 is out one conatiner we have 0 got created. of two containers are pooending it shows 0/2. if one cretaed 1/2. 

ubuntu@ip-172-31-33-243:~$ kubectl get pods -o wide
NAME            READY   STATUS    RESTARTS   AGE   IP              NODE          NOMINATED NODE   READINESS GATES
javawebapppod   0/1     Pending   0          11m   10.47.0.1   ip-172-31-44-167   <none>           <none>


for aboce one will get more details about that pod. additional columns. that IP is pod IP. using this pod IP we can access inside the cluster.
ubuntu@ip-172-31-33-243:~$ curl 10.47.0.1:8080

we are getting the response from this POD IP. but in real time we will have multiple pods for one image. 

==> How to access it from outside? 
  = using Service. here we will not use pod IP.

Service
=========
K8s service is responsible for making our pods discoverable(accessible) within the cluster or outside the cluster. 

Types: clusterIP service
      Node IP service
      loadbalancer service (external laod balanacer)
      Headless service


*What is the diff btw Docker service and K8s service?
-> docker serive: is kind of process and communication
    k8s service: is only for communication. 

*When we create a service will get one "cluster IP (Virtual IP)".  This IP will be mapped with service name(Kube-DNS). Using this other PODS can find  and talk the PODS of this 
service using  service name. 

*Service is just a logical concepts. the real work is being done by "Kube-Proxy" pod that is running on each node.
* It redirects from cluster IP to POD IP. 

Syntax:

apiVersion: v1
kind: service
metadata:
  name: <serviceName>
  namespace: <namespacename>  --> this name should be same as we used in pod. if dont gice also it will consider automatically.
spec: 
  type: <ClusterIP/NodePort/LoadBalancer>   --> use any one type of service
  selector: 
    <PodLabelkey>: <Podlabelvalue>         --> Wiil find in pod. use this to connect with labels and services.
  ports:   
  - port: 80                                --> Default port of service
    targetPort: <ContainerPort>             --> use the port what we use in POD as a container port.


Now how service will idenfy the pod out of many pods. using labels and selectors concept. we alraedy have labels in pod. we can use that labels as a selectors. 
so it can identify the pod. to find out that use the fallowing

ubuntu@ip-172-31-33-243:~$ kubectl get pods --show-labels
NAME            READY   STATUS    RESTARTS   AGE      LABELS
javawebapppod   1/1     Running   0          3m50s    app=javawebapp


aboce we can see labels app=javawebapp. use them as selectors 

EX:
apiVersion: v1
kind: service
metadata:
  name: javawebappsvc
spec: 
  type: ClusterIP  
  selector: 
    app: javawebapp         
  ports:   
  - port: 80 
    targetPort: 8080

if any request comes to Kube-proxy through 80 port. it will redirect that to 8080 conatiner port. 

lets craete a service now. in existing yml file we can add this also. but both should be divided by --- (3 hypens) this is yml standard. we can craete new yml file for service also fine. 

ubuntu@ip-172-31-33-243:~$ vi javawebapppod.yml
apiVersion: v1
kind: Pod
metadata: 
  name: javawebapppod
  labels: 
    app: javawebapp
spec: 
  containers: 
  - name: javawebappcontainers
    image: dockerregistry/java-web-app:1
    ports:
    - containerPort: 8080
---
apiVersion: v1
kind: service
metadata:
  name: javawebappsvc
spec: 
  type: ClusterIP  
  selector: 
    app: javawebapp         
  ports:   
  - port: 80 
    targetPort: 8080

:wq

ubuntu@ip-172-31-33-243:~$ kubectl apply -f javawebapppod.yml
pod/javawebapppod unchanged
service/javawebappsvc created

Now we have careted a service and pod has no change. these all info will be stored in ETCD. 

ubuntu@ip-172-31-33-243:~$ kubectl get svc
NAME                TYPE        CLUSTER-IP      EXTERNAL-IP  PORT(S)   AGE
javawebappsvc      ClusterIP    10.106.146.40    <none>       80/TCP    46S
kubernetes         ClusterIP     10.96.0.1       <none>       443/TCP    23h

above we can see our service name. kubernetes service is default one. CLUSTER IP is our virtual IP address. 

if we want to see all details about service. decribe it.

ubuntu@ip-172-31-33-243:~$ kubectl describe svc javawebappsvc
.
.
.
Endpoint: 10.47.0.1:8080
.


ubuntu@ip-172-31-33-243:~$ kubectl get pods -o wide
NAME            READY   STATUS    RESTARTS   AGE   IP              NODE          NOMINATED NODE   READINESS GATES
javawebapppod   0/1     Pending   0          11m   10.47.0.1   ip-172-31-44-167   <none>           <none>

Above we can see the POD IP as a EndPoint and 8080 port is a target port (container port). 

ubuntu@ip-172-31-33-243:~$ curl 10.106.146.40

herw we come to know that the IP is working. here i didnt mention 80 port. bcoz its default one. it will redirect that request to container port. 

ubuntu@ip-172-31-33-243:~$ curl javawebappsvc
curl: (6) Could not resolve host: javawebappsvc

Why bocz i am using this service from the server (ubuntu@ip-172-31-33-243). but it will not work. we have DNS. that DNS resolution will work only from the pod. 

lets craete one more pod for maven-web-app.

ubuntu@ip-172-31-33-243:~$ vi mavenwebapppod
apiVersion: v1
kind: Pod
metadata:
  name: mavenwebapp
  labels:
    app: mavenwebapp
spec:
  containers:
  - name: mavenwebapp
    image: dockerhandson/maven-web-application:1
    ports:
    - containerPort: 8080

:wq

ubuntu@ip-172-31-33-243:~$ kubectl apply -f mavenwebapppod
pod/mavenwebapp created
ubuntu@ip-172-31-33-243:~$ kubectl describe pod mavenwebapp

default-schdeluer  Successfully assigned default/mavenwebapp to ip-172-31-34-139
kubelet            pulling image "dockerhandson:maven-web-application:1"


using above command we will get all details of that pod. where it assigned and from where that image got pulled.  

We have created a service for javawebapp, lets go inside the pod and execute curl with service name.

"kubectl exec -it <podname> bash"

ubuntu@ip-172-31-33-243:~$ kubectl exec -it mavenwebapp bash
bash-4.2# curl javawebappsvs

From inside the pod our dns service is working fine. then we dont need to depend on the IP's. 
Now we can access it from inside the pod. if we want to access it outside(browser). we need to apply NodePort Service. 











